Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/06/16 19:39:13
..\..\..\..\..\Desktop\huntForTheRedBlocktober.asm	     Page 1 - 1


				Include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; --------------------------------------------------------
				;  CONSTANST
				; -------------------------------------------------------- -

 = 00000096			SCREEN_WIDTH = 150
 = 00000032			SCREEN_HEIGHT = 50
 = 0000007D			GAME_WIDTH = 125
 = 0000002F			GAME_HEIGHT = 47
 = 00000014			BLOCK_WIDTH = 20
 = 0000000A			BLOCK_HEIGHT = 10
 = 00000069			BL_MAX_X = GAME_WIDTH - BLOCK_WIDTH
 = 00000028			BL_MAX_Y = SCREEN_HEIGHT - BLOCK_HEIGHT

 = 0000002F			STAT_BAR_LINE_OFFSET_Y = SCREEN_HEIGHT - 3
 = 00000019			RIGHT_BAR = 25
 = 0000007D			RIGHT_BAR_START_x = SCREEN_WIDTH - RIGHT_BAR
 = 0000000F			COLOR_DEFAULT = (white + black * 16)
 = 00000002			COLOR_GREEN = (green + black * 16)
 = 0000000E			COLOR_FG_YELLOW = (yellow + black * 16)
 = 0000000F			COLOR_WHITE = (white + black * 16)
 = 00000000			COLOR_BLACK = (black + black * 16)
 = 00000004			COLOR_RED = (red + black * 16)
 = 00000001			COLOR_BLUE = (blue + black * 16)
 = 0000000E			COLOR_YELLOW = (yellow + black * 16)
				; --------------------------------------------------------
				; Mouse Event Handler
				; -------------------------------------------------------- -
 00000014			_INPUT_RECORD STRUCT
 00000000  0000			EventType   WORD ?
 00000002  0000			WORD ?
				UNION
 00000004  0000 0000		MouseEvent            MOUSE_EVENT_RECORD        <>
	   00000000
	   00000000
	   00000000
				WindowBufferSizeEvent WINDOW_BUFFER_SIZE_RECORD <>
				MenuEvent             MENU_EVENT_RECORD         <>
				FocusEvent            FOCUS_EVENT_RECORD        <>
				KeyEvent			KEY_EVENT_RECORD			<>
				ENDS
				_INPUT_RECORD ENDS

				MouseEventInput PROTO,
				prtPoint: DWORD

				checkBounds macro COORD
				LOCAL currRect
					.data
					.code
					INVOKE MouseEventInput, ADDR COORD

				ENDM

				.stack 4096
 00000000			.data
 00000000 DB 20 20 DB 20	hunt1 db 219,32,32,219,32,219,32,32,219,32,219,219,32,32,32,32,219,32,219,219,219,219,219,32,32
	   DB 20 20 DB 20
	   DB DB 20 20 20
	   20 DB 20 DB DB
	   DB DB DB 20 20
 00000019 DB DB DB DB 20	hunt2 db 219,219,219,219,32,219,219,219,219,32,219,219,219,219,32,32,219,219,219,219,219,32,219,32,32,219,32,219,219,219,219,0
	   DB DB DB DB 20
	   DB DB DB DB 20
	   20 DB DB DB DB
	   DB 20 DB 20 20
	   DB 20 DB DB DB
	   DB 00
 00000039 DB 20 20 DB 20	hunt3 db 219,32,32,219,32,219,32,32,219,32,219,219,219,32,32,32,219,32,32,32,219,32,32,32,32,219,32,32,32,32
	   DB 20 20 DB 20
	   DB DB DB 20 20
	   20 DB 20 20 20
	   DB 20 20 20 20
	   DB 20 20 20 20
 00000057 DB 20 20 DB 20	hunt4 db 219,32,32,219,32,219,32,32,219,32,32,32,32,219,32,32,32,219,32,32,219,32,219,32,32,32,0
	   DB 20 20 DB 20
	   20 20 20 DB 20
	   20 20 DB 20 20
	   DB 20 DB 20 20
	   20 00
 00000072 DB DB DB DB 20	hunt5 db 219,219,219,219,32,219,32,32,219,32,219,32,219,219,32,32,219,32,32,32,219,32,32,32,32,219,219,219,32,32
	   DB 20 20 DB 20
	   DB 20 DB DB 20
	   20 DB 20 20 20
	   DB 20 20 20 20
	   DB DB DB 20 20
 00000090 DB 20 20 DB 20	hunt6 db 219,32,32,219,32,219,219,219,219,32,32,32,32,219,32,32,32,219,219,219,219,32,219,219,219,32,0
	   DB DB DB DB 20
	   20 20 20 DB 20
	   20 20 DB DB DB
	   DB 20 DB DB DB
	   20 00
 000000AB DB 20 20 DB 20	hunt7 db 219,32,32,219,32,219,32,32,219,32,219,32,32,219,219,32,219,32,32,32,219,32,32,32,32,219,32,32,32,32
	   DB 20 20 DB 20
	   DB 20 20 DB DB
	   20 DB 20 20 20
	   DB 20 20 20 20
	   DB 20 20 20 20
 000000C9 DB 20 20 DB 20	hunt8 db 219,32,32,219,32,219,219,219,32,32,32,32,32,219,32,32,32,219,32,32,219,32,219,32,32,32,0
	   DB DB DB 20 20
	   20 20 20 DB 20
	   20 20 DB 20 20
	   DB 20 DB 20 20
	   20 00
 000000E4 DB 20 20 DB 20	hunt9 db 219,32,32,219,32,219,219,219,219,32,219,32,32,32,219,219,219,32,32,32,219,32,32,32,32,219,32,32,32,32
	   DB DB DB DB 20
	   DB 20 20 20 DB
	   DB DB 20 20 20
	   DB 20 20 20 20
	   DB 20 20 20 20
 00000102 DB DB DB DB 20	hunt10 db 219,219,219,219,32,219,32,219,219,32,32,32,32,219,32,32,32,219,32,32,219,32,219,219,219,219,0
	   DB 20 DB DB 20
	   20 20 20 DB 20
	   20 20 DB 20 20
	   DB 20 DB DB DB
	   DB 00
 0000011D  00000006 [		red1 db 6 dup(219),2 dup(32),6 dup(219),2 dup(32),5 dup(219), 5 dup (32)
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000005 [
	    DB
	   ]
	   00000005 [
	    20
	   ]
 00000137  00000005 [		bloctober1 db 5 dup(219), 3 dup(32), 2 dup(219), 19 dup (32), 6 dup(219), 2 dup(32), 2 dup(219), 2 dup(32),2 dup(219), 2 dup(32), 6 dup(219),2 dup(32), 6 dup(219)
	    DB
	   ]
	   00000003 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000013 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
 00000172  00000002 [		bloctober11 db 2 dup(32),5 dup(219), 3 dup(32),6 dup(219),2 dup(32),6 dup(219), 2 dup(32),0
	    20
	   ]
	   00000005 [
	    DB
	   ]
	   00000003 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ] 00
 0000018D  00000006 [		red2 db 6 dup(219),2 dup(32),2 dup(219),6 dup(32),6 dup(219),4 dup(32)
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000006 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000004 [
	    20
	   ]
 000001A7  00000006 [		bloctober2 db 6 dup(219), 2 dup(32), 2 dup(219), 19 dup(32), 6 dup(219), 2 dup(32), 2 dup(219), 32, 2 dup(219), 3 dup(32), 6 dup(219), 2 dup(32), 6 dup(219)
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000013 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ] 20
	   00000002 [
	    DB
	   ]
	   00000003 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
 000001E2  00000002 [		blcoktober22 db 2 dup(32), 6 dup(219), 2 dup(32), 2 dup(219), 6 dup(32), 6 dup(219), 2 dup(32), 0
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000006 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ] 00
 000001FD DB DB 20 20 DB	red3 db 219, 219, 32, 32, 219, 219, 2 dup(32), 2 dup(219), 6 dup(32), 219, 219, 32, 32, 219, 219, 4 dup(32)
	   DB
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000006 [
	    20
	   ] DB DB 20 20
	   DB DB
	   00000004 [
	    20
	   ]
 00000217  00000002 [		bloctober3 db 2 dup(219), 2 dup(32), 2 dup(219), 2 dup(32), 2 dup(219), 19 dup(32), 2 dup(219), 6 dup(32), 4 dup(219), 6 dup(32), 2 dup(219), 4 dup(32), 2 dup(219), 2 dup(32), 2 dup(219)
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000013 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000006 [
	    20
	   ]
	   00000004 [
	    DB
	   ]
	   00000006 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000004 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
 00000252  00000002 [		blocktober33 db 2 dup(32), 2 dup(219), 2 dup(32), 2 dup(219), 2 dup(32), 2 dup(219), 6 dup(32), 2 dup(219), 2 dup(32), 2 dup(219), 2 dup(32), 0
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000006 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ] 00
 0000026D  00000006 [		red4 db 6 dup(219), 2 dup(32), 4 dup(219), 4 dup(32), 219, 219, 32, 32, 219, 219, 4 dup(32)
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000004 [
	    DB
	   ]
	   00000004 [
	    20
	   ] DB DB 20 20
	   DB DB
	   00000004 [
	    20
	   ]
 00000287  00000005 [		bloctober4 db 5 dup(219), 3 dup(32), 2 dup(219), 19 dup(32), 2 dup(219), 6 dup(32), 3 dup(219), 7 dup(32), 2 dup(219), 4 dup(32), 2 dup(219), 2 dup(32), 2 dup(219)
	    DB
	   ]
	   00000003 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000013 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000006 [
	    20
	   ]
	   00000003 [
	    DB
	   ]
	   00000007 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000004 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
 000002C2  00000002 [		blocktober44 db 2 dup(32), 5 dup(219), 3 dup(32), 4 dup(219), 4 dup(32), 6 dup(219), 2 dup(32), 0
	    20
	   ]
	   00000005 [
	    DB
	   ]
	   00000003 [
	    20
	   ]
	   00000004 [
	    DB
	   ]
	   00000004 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ] 00
 000002DD  00000004 [		red5 db 4 dup(219), 4 dup(32), 2 dup(219), 6 dup(32), 219, 219, 32, 32, 219, 219, 4 dup(32)
	    DB
	   ]
	   00000004 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000006 [
	    20
	   ] DB DB 20 20
	   DB DB
	   00000004 [
	    20
	   ]
 000002F7  00000002 [		bloctober5 db 2 dup(219), 2 dup(32), 2 dup(219), 2 dup(32), 2 dup(219), 19 dup(32), 2 dup(219), 6 dup(32), 4 dup(219), 6 dup(32), 2 dup(219), 4 dup(32), 2 dup(219), 2 dup(32), 2 dup(219)
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000013 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000006 [
	    20
	   ]
	   00000004 [
	    DB
	   ]
	   00000006 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000004 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
 00000332  00000002 [		blocktober55 db 2 dup(32), 2 dup(219), 2 dup(32), 2 dup(219), 2 dup(32), 2 dup(219), 6 dup(32), 4 dup(219), 3 dup(32), 0
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000006 [
	    20
	   ]
	   00000004 [
	    DB
	   ]
	   00000003 [
	    20
	   ] 00
 0000034C  00000002 [		red6 db 2 dup(219), 32, 2 dup(219), 3 dup(32), 2 dup(219), 6 dup(32), 6 dup(219), 4 dup(32)
	    DB
	   ] 20
	   00000002 [
	    DB
	   ]
	   00000003 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000006 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000004 [
	    20
	   ]
 00000366  00000006 [		bloctober6 db 6 dup(219), 2 dup(32), 6 dup(219), 15 dup(32), 6 dup(219), 2 dup(32), 2 dup(219), 32, 2 dup(219), 5 dup(32), 2 dup(219), 4 dup(32), 6 dup(219)
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   0000000F [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ] 20
	   00000002 [
	    DB
	   ]
	   00000005 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000004 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
 000003A1  00000002 [		blocktober66 db 2 dup(32), 6 dup(219), 2 dup(32), 2 dup(219), 6 dup(32), 2 dup(219), 32, 2 dup(219), 3 dup(32), 0
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000006 [
	    20
	   ]
	   00000002 [
	    DB
	   ] 20
	   00000002 [
	    DB
	   ]
	   00000003 [
	    20
	   ] 00
 000003BC  00000002 [		red7 db 2 dup(219), 2 dup(32), 2 dup(219), 2 dup(32), 6 dup(219), 2 dup(32), 5 dup(219), 5 dup(32)
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000005 [
	    DB
	   ]
	   00000005 [
	    20
	   ]
 000003D6  00000005 [		bloctober7 db 5 dup(219), 3 dup(32), 6 dup(219), 15 dup(32), 6 dup(219), 2 dup(32), 2 dup(219), 2 dup(32), 2 dup(219), 4 dup(32), 2 dup(219), 4 dup(32), 6 dup(219)
	    DB
	   ]
	   00000003 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   0000000F [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000004 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000004 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
 00000411  00000002 [		blocktober77 db 2 dup(32), 5 dup(219), 3 dup(32), 6 dup(219), 2 dup(32), 2 dup(219), 2 dup(32), 2 dup(219), 2 dup(32), 0
	    20
	   ]
	   00000005 [
	    DB
	   ]
	   00000003 [
	    20
	   ]
	   00000006 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ]
	   00000002 [
	    DB
	   ]
	   00000002 [
	    20
	   ] 00
 0000042C 00			clickedLast db 0
 0000042D 01			firstTime db 1
 0000042E 01			intitle db 1
 0000042F C9			topBlock db 201, 18 dup(205), 187, 0
	   00000012 [
	    CD
	   ] BB 00
 00000444 BA			middleBlock db 186, 18 dup(32), 186, 0
	   00000012 [
	    20
	   ] BA 00
 00000459 C8			bottomBlock db 200, 18 dup(205), 188, 0
	   00000012 [
	    CD
	   ] BC 00
 0000046E C9			topLifeBlock db 201, 5 dup(205), 187, 0
	   00000005 [
	    CD
	   ] BB 00
 00000476 BA			middleLifeBlock db 186, 5 dup(32), 186, 0
	   00000005 [
	    20
	   ] BA 00
 0000047E C8			bottomLifeBlock db 200, 5 dup(205), 188, 0
	   00000005 [
	    CD
	   ] BC 00
 00000486 C9			topClickBlock db 201, 3 dup(205), 187, 0
	   00000003 [
	    CD
	   ] BB 00
 0000048C BA			middleClickBlock db 186, 3 dup(32), 186, 0
	   00000003 [
	    20
	   ] BA 00
 00000492 C8			bottomClickBlock db 200, 3 dup(205), 188, 0
	   00000003 [
	    CD
	   ] BC 00
 00000498 96			screenWidth db 150
 00000499 32			screenHeight db 50
 0000049A 7D			gameWidth db 125
 0000049B 2F			gameHeight db 47
 0000049C 00			currentRow db ?
 0000049D 00			currentCol db ?
 0000049E 05			boxHeight db 5
 0000049F 0B			boxWidth db 11
 000004A0 C0			boxColor db 192
 000004A1 0F			whitecolor db 15
 000004A2 53 43 4F 52 45	output db "SCORE", 0
	   00
 000004A8 59 4F 55 52 20	output2 db "YOUR SCORE", 0
	   53 43 4F 52 45
	   00
 000004B3 4C 45 56 45 4C	output3 db "LEVEL ", 0
	   20 00
 000004BA 4C 49 56 45 53	output4 db "LIVES", 0
	   00
 000004C0 4E 45 58 54 20	output5 db "NEXT LEVEL", 0; number of blocks clicked to next level = 5
	   4C 45 56 45 4C
	   00
 000004CB 4E 45 58 54 20	output6 db "NEXT LIFE", 0; number of consecutive clicks to next life = 3
	   4C 49 46 45 00
 000004D5 43 6C 69 63 6B	output7 db "Click on the box to start the game!", 0
	   20 6F 6E 20 74
	   68 65 20 62 6F
	   78 20 74 6F 20
	   73 74 61 72 74
	   20 74 68 65 20
	   67 61 6D 65 21
	   00
 000004F9 50 72 65 73 73	output8 db "Press H for help.", 0
	   20 48 20 66 6F
	   72 20 68 65 6C
	   70 2E 00
 0000050B 20 20 20 20 20	enterName db "                                      Enter your name: ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 45 6E
	   74 65 72 20 79
	   6F 75 72 20 6E
	   61 6D 65 3A 20
	   00
 00000543 09 09 09 09 09	thx db "					        Thx for playing, ",0	
	   20 20 20 20 20
	   20 20 20 54 68
	   78 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 2C 20
	   00
 00000562  0000000F [		player byte 15 dup(?),0
	    00
	   ] 00
 00000572 00000000		plsize dword ?
 00000576 00			currentClicks db 0
 00000577 00			currentBlocksClicked db 0
 00000578 00			blockClicked db 0
 00000579 00			movementOn db 0
 0000057A 01			movex db 1
 0000057B 01			movey db 1
 0000057C 05			lives db 5
 0000057D 00000000		yourscore dd 0
 00000581 000009C4		seconds dd 2500
 00000585 00000000		score dd 0
 00000589 01			level db 1
 0000058A 00000000		currTime dd ?
 0000058E 00000000		lastTime dd ?
 00000592 00000000		tempScore dd 0
 00000596 0000 0000		mouse COORD < ? , ? >
 0000059A 0000			mouseClickx dw ?
 0000059C 0000			mouseClicky dw ?
 0000059E 00000000		eventsRead dd ?
 000005A2 95			maxx db 149
 000005A3 31			maxy db 49
 000005A4 00			newLevel db 0
 000005A5 2D 2D 2D 2D 2D	helpTitle db "----------------------HELP--------------------", 0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 48 45 4C
	   50 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 00
 000005D4 31 2E 20 43 6C	help1 db "1. Click on the box to score.                 ", 0dh, 0ah
	   69 63 6B 20 6F
	   6E 20 74 68 65
	   20 62 6F 78 20
	   74 6F 20 73 63
	   6F 72 65 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A
 00000604  32 2E 20 54 68	db "2. The faster you click the higher your score.", 0dh, 0ah
	   65 20 66 61 73
	   74 65 72 20 79
	   6F 75 20 63 6C
	   69 63 6B 20 74
	   68 65 20 68 69
	   67 68 65 72 20
	   79 6F 75 72 20
	   73 63 6F 72 65
	   2E 0D 0A
 00000634  33 2E 20 44 6F	db "3. Dont miss the box!                         ", 0dh, 0ah, 0
	   6E 74 20 6D 69
	   73 73 20 74 68
	   65 20 62 6F 78
	   21 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00

 00000665 68			hKey db 'h'
 00000666  00000096 [		rail_line db 150 dup(220), 0
	    DC
	   ] 00

 000006FD 20 20 20 20 20	gameover0 byte "            ______                                            ______                                  __ ", 0
	   20 20 20 20 20
	   20 20 5F 5F 5F
	   5F 5F 5F 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 5F 5F 5F
	   5F 5F 5F 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 5F 5F 20
	   00
 00000767 = 0000006A		gosize = $ - gameover0
 00000767 20 20 20 20 20	gameover1 byte "           /      \                                          /      \                                |  \ ", 0
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 5C 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 5C 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 7C 20 20 5C
	   20 00
 000007D2 20 20 20 20 20	gameover2 byte "          |  $$$$$$\  ______   ______ ____    ______        |  $$$$$$\ __     __   ______    ______  | $$ ", 0
	   20 20 20 20 20
	   7C 20 20 24 24
	   24 24 24 24 5C
	   20 20 5F 5F 5F
	   5F 5F 5F 20 20
	   20 5F 5F 5F 5F
	   5F 5F 20 5F 5F
	   5F 5F 20 20 20
	   20 5F 5F 5F 5F
	   5F 5F 20 20 20
	   20 20 20 20 20
	   7C 20 20 24 24
	   24 24 24 24 5C
	   20 5F 5F 20 20
	   20 20 20 5F 5F
	   20 20 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 5F 5F
	   5F 5F 5F 5F 20
	   20 7C 20 24 24
	   20 00
 0000083D 20 20 20 20 20	gameover3 byte "          | $$ __\$$ |      \ |      \    \  /      \       | $$  | $$|  \   /  \ /      \  /      \ | $$ ", 0
	   20 20 20 20 20
	   7C 20 24 24 20
	   5F 5F 5C 24 24
	   20 7C 20 20 20
	   20 20 20 5C 20
	   7C 20 20 20 20
	   20 20 5C 20 20
	   20 20 5C 20 20
	   2F 20 20 20 20
	   20 20 5C 20 20
	   20 20 20 20 20
	   7C 20 24 24 20
	   20 7C 20 24 24
	   7C 20 20 5C 20
	   20 20 2F 20 20
	   5C 20 2F 20 20
	   20 20 20 20 5C
	   20 20 2F 20 20
	   20 20 20 20 5C
	   20 7C 20 24 24
	   20 00
 000008A8 20 20 20 20 20	gameover4 byte "          | $$|    \  \$$$$$$\| $$$$$$\$$$$\|  $$$$$$\      | $$  | $$ \$$\ /  $$|  $$$$$$\|  $$$$$$\| $$ ", 0
	   20 20 20 20 20
	   7C 20 24 24 7C
	   20 20 20 20 5C
	   20 20 5C 24 24
	   24 24 24 24 5C
	   7C 20 24 24 24
	   24 24 24 5C 24
	   24 24 24 5C 7C
	   20 20 24 24 24
	   24 24 24 5C 20
	   20 20 20 20 20
	   7C 20 24 24 20
	   20 7C 20 24 24
	   20 5C 24 24 5C
	   20 2F 20 20 24
	   24 7C 20 20 24
	   24 24 24 24 24
	   5C 7C 20 20 24
	   24 24 24 24 24
	   5C 7C 20 24 24
	   20 00
 00000913 20 20 20 20 20	gameover5 byte "          | $$ \$$$$ /      $$| $$ | $$ | $$| $$    $$      | $$  | $$  \$$\  $$ | $$    $$| $$   \$$ \$$ ", 0
	   20 20 20 20 20
	   7C 20 24 24 20
	   5C 24 24 24 24
	   20 2F 20 20 20
	   20 20 20 24 24
	   7C 20 24 24 20
	   7C 20 24 24 20
	   7C 20 24 24 7C
	   20 24 24 20 20
	   20 20 24 24 20
	   20 20 20 20 20
	   7C 20 24 24 20
	   20 7C 20 24 24
	   20 20 5C 24 24
	   5C 20 20 24 24
	   20 7C 20 24 24
	   20 20 20 20 24
	   24 7C 20 24 24
	   20 20 20 5C 24
	   24 20 5C 24 24
	   20 00
 0000097E 20 20 20 20 20	gameover6 byte "          | $$__| $$|  $$$$$$$| $$ | $$ | $$| $$$$$$$$      | $$__/ $$   \$$ $$  | $$$$$$$$| $$       __  ", 0
	   20 20 20 20 20
	   7C 20 24 24 5F
	   5F 7C 20 24 24
	   7C 20 20 24 24
	   24 24 24 24 24
	   7C 20 24 24 20
	   7C 20 24 24 20
	   7C 20 24 24 7C
	   20 24 24 24 24
	   24 24 24 24 20
	   20 20 20 20 20
	   7C 20 24 24 5F
	   5F 2F 20 24 24
	   20 20 20 5C 24
	   24 20 24 24 20
	   20 7C 20 24 24
	   24 24 24 24 24
	   24 7C 20 24 24
	   20 20 20 20 20
	   20 20 5F 5F 20
	   20 00
 000009E9 20 20 20 20 20	gameover7 byte "           \$$    $$ \$$    $$| $$ | $$ | $$ \$$     \       \$$    $$    \$$$    \$$     \| $$      |  \ ", 0
	   20 20 20 20 20
	   20 5C 24 24 20
	   20 20 20 24 24
	   20 5C 24 24 20
	   20 20 20 24 24
	   7C 20 24 24 20
	   7C 20 24 24 20
	   7C 20 24 24 20
	   5C 24 24 20 20
	   20 20 20 5C 20
	   20 20 20 20 20
	   20 5C 24 24 20
	   20 20 20 24 24
	   20 20 20 20 5C
	   24 24 24 20 20
	   20 20 5C 24 24
	   20 20 20 20 20
	   5C 7C 20 24 24
	   20 20 20 20 20
	   20 7C 20 20 5C
	   20 00
 00000A54 20 20 20 20 20	gameover8 byte "            \$$$$$$   \$$$$$$$ \$$  \$$  \$$  \$$$$$$$        \$$$$$$      \$      \$$$$$$$ \$$       \$$ ", 0
	   20 20 20 20 20
	   20 20 5C 24 24
	   24 24 24 24 20
	   20 20 5C 24 24
	   24 24 24 24 24
	   20 5C 24 24 20
	   20 5C 24 24 20
	   20 5C 24 24 20
	   20 5C 24 24 24
	   24 24 24 24 20
	   20 20 20 20 20
	   20 20 5C 24 24
	   24 24 24 24 20
	   20 20 20 20 20
	   5C 24 20 20 20
	   20 20 20 5C 24
	   24 24 24 24 24
	   24 20 5C 24 24
	   20 20 20 20 20
	   20 20 5C 24 24
	   20 00

 00000ABF 0000 0000 0000	InputRecord _INPUT_RECORD <>
	   0000 00000000
	   00000000
	   00000000
 00000AD3 00000000		hStdIn  dd 0
 00000AD7 00000000		nRead   dd 0
 00000ADB 00000000		ConsoleMode dd 0

 00000ADF 20 20 20 20 20	car0 byte "                                                                   _________________________    ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 20 20 20
	   20 00
 00000B40 = 00000061		carsize = $ - car0
 00000B40 20 20 20 20 20	car1 byte "                              /\\      _____          _____       |   |     |     |    | |  \   ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2F 5C 5C 20 20
	   20 20 20 20 5F
	   5F 5F 5F 5F 20
	   20 20 20 20 20
	   20 20 20 20 5F
	   5F 5F 5F 5F 20
	   20 20 20 20 20
	   20 7C 20 20 20
	   7C 20 20 20 20
	   20 7C 20 20 20
	   20 20 7C 20 20
	   20 20 7C 20 7C
	   20 20 5C 20 20
	   20 00
 00000BA1 20 20 20 20 20	car2 byte "               .-----,       /  \\____/__|__\_    ___/__|__\___   |___|_____|_____|____|_|___\  ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   2E 2D 2D 2D 2D
	   2D 2C 20 20 20
	   20 20 20 20 2F
	   20 20 5C 5C 5F
	   5F 5F 5F 2F 5F
	   5F 7C 5F 5F 5C
	   5F 20 20 20 20
	   5F 5F 5F 2F 5F
	   5F 7C 5F 5F 5C
	   5F 5F 5F 20 20
	   20 7C 5F 5F 5F
	   7C 5F 5F 5F 5F
	   5F 7C 5F 5F 5F
	   5F 5F 7C 5F 5F
	   5F 5F 7C 5F 7C
	   5F 5F 5F 5C 20
	   20 00
 00000C02 20 20 20 20 20	car3 byte "            ,--.---:---.-- /  |  '     |      | |      |       |  |                    | |    \ ", 0
	   20 20 20 20 20
	   20 20 2C 2D 2D
	   2E 2D 2D 2D 3A
	   2D 2D 2D 2E 2D
	   2D 20 2F 20 20
	   7C 20 20 27 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   20 7C 20 7C 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 7C 20
	   20 7C 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 7C
	   20 20 20 20 5C
	   20 00
 00000C63 20 20 20 20 20	car4 byte "           ==(o)-----(o)==J    `(o)-------(o)=   `(o)------(o)'    `--(o)(o)--------------(o)-- ", 0
	   20 20 20 20 20
	   20 3D 3D 28 6F
	   29 2D 2D 2D 2D
	   2D 28 6F 29 3D
	   3D 4A 20 20 20
	   20 60 28 6F 29
	   2D 2D 2D 2D 2D
	   2D 2D 28 6F 29
	   3D 20 20 20 60
	   28 6F 29 2D 2D
	   2D 2D 2D 2D 28
	   6F 29 27 20 20
	   20 20 60 2D 2D
	   28 6F 29 28 6F
	   29 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   28 6F 29 2D 2D
	   20 00

 00000000			.code

 00000000			main proc
 00000000  E8 00000000 E		call randomize
 00000005  E8 000000C9			call mainscreen

 0000000A				loopGame:
 0000000A  B8 00000000			mov eax, 0
 0000000F  B8 00000000			mov eax,0
 00000014  BB 00000000			mov ebx, 0
 00000019  B9 00000000			mov ecx, 0
 0000001E  BA 00000000			mov edx, 0
 00000023				loopnoclick:
							invoke GetStdHandle, STD_INPUT_HANDLE
 0000002A  A3 00000AD3 R				mov hStdIn, eax
							invoke GetConsoleMode, hStdIn, ADDR ConsoleMode
 0000003F  B8 00000090					mov eax, 0090h
							invoke SetConsoleMode, hStdIn, eax
							invoke GetNumberOfConsoleInputEvents, hStdIn, ADDR eventsRead
 00000060  A1 0000059E R				mov eax, eventsRead
 00000065  83 F8 00					cmp eax, 0
 00000068  74 26					jz continueloop
							invoke ReadConsoleInput, hStdIn, ADDR InputRecord, 1, ADDR nRead
 00000081  A1 00000AC7 R				mov  eax, InputRecord.MouseEvent.dwButtonState
 00000086  83 F8 00					cmp eax, 0
 00000089  75 05					jne continueloop
 0000008B  B9 00000000					mov ecx, 0
 00000090					continueloop:
 00000090  41						inc ecx
 00000091  E2 90				loop loopnoclick
 00000093  80 3D 000005A4 R			cmp newLevel, 1
	   01
 0000009A  75 05				jne nonewLevel
 0000009C  E8 000000A9				call levelstart
 000000A1					nonewlevel:
 000000A1  E8 000004C6					call writeBlock
 000000A6  E8 00000215					call writeInfo
 000000AB  E8 0000064B					call makeRect
 000000B0  E8 0000050B					call countdown
 000000B5  B9 00000002					mov ecx, 2
 000000BA  A0 000004A1 R				mov al, whitecolor
 000000BF  E8 00000000 E				call settextcolor
 000000C4  E8 00000000 E				call clrscr
 000000C9  41						inc ecx
 000000CA  83 F9 00				cmp ecx, 0
 000000CD  0F 8F FFFFFF37			jg loopGame
 000000D3			main endp

				;-----------------------------
				;shows the main title until the user
				;clicks the red block
				;------------------------------

 000000D3			mainscreen proc
 000000D3  B0 0E			mov al, COLOR_YELLOW
 000000D5  E8 00000000 E		call setTextColor
 000000DA  BA 0000050B R		mov edx, offset enterName
 000000DF  E8 00000000 E		call writeString

 000000E4  BA 00000562 R		mov edx, offset player
 000000E9  B9 0000000F			mov ecx, 15
 000000EE  E8 00000000 E		call readString
 000000F3  E8 00000000 E		call clrscr

 000000F8				titleloop:
 000000F8  E8 000000CA				call writetitle
 000000FD  B6 2D				mov dh, 45
 000000FF  B2 39				mov dl, 57
 00000101  E8 00000000 E			call gotoxy
 00000106  BA 000004D5 R			mov edx, offset output7
 0000010B  E8 00000000 E			call writestring
 00000110  B6 2E				mov dh, 46
 00000112  B2 42				mov dl, 66
 00000114  E8 00000000 E			call gotoxy
 00000119  BA 000004F9 R			mov edx, offset output8
 0000011E  E8 00000000 E			call writestring
 00000123  E8 000005D3				call makeRect
 00000128  E8 00000493				call countdown
 0000012D  E8 00000000 E			call clrscr
 00000132  8A 15 0000042C R			mov dl, clickedLast
 00000138  80 FA 01				cmp dl, 1
 0000013B  75 BB			jne titleLoop
 0000013D  C6 05 0000042E R		mov intitle, 0
	   00
 00000144  E8 00000000 E		call clrscr
 00000149  C3			ret
 0000014A			mainscreen endp

				;--------------------------------------------
				;prints the level you are in before each
				;level. click on the moving block to proceed
				;--------------------------------------------

 0000014A			levelstart proc
 0000014A  C6 05 0000042E R		mov inTitle, 1
	   01
 00000151  C6 05 0000042C R		mov clickedLast, 0
	   00
 00000158				levelloop:
 00000158  B8 00000000				mov eax, 0
 0000015D  B6 0C				mov dh, 12
 0000015F  B2 47				mov dl, 71
 00000161  E8 00000000 E			call gotoxy
 00000166  BA 000004B3 R			mov edx, offset output3
 0000016B  E8 00000000 E			call writestring
 00000170  A0 00000589 R			mov al, level
 00000175  E8 00000000 E			call writedec
 0000017A  B0 21				mov al, '!'
 0000017C  E8 00000000 E			call writechar
 00000181  B6 2D				mov dh, 45
 00000183  B2 39				mov dl, 57
 00000185  E8 00000000 E			call gotoxy
 0000018A  BA 000004D5 R			mov edx, offset output7
 0000018F  E8 00000567				call makeRect
 00000194  E8 00000427				call countdown
 00000199  A0 000004A1 R			mov al, whitecolor
 0000019E  E8 00000000 E			call settextcolor
 000001A3  E8 00000000 E			call clrscr
 000001A8  8A 15 0000042C R			mov dl, clickedLast
 000001AE  80 FA 01				cmp dl, 1
 000001B1  75 A5				jne levelLoop
 000001B3  C6 05 0000042E R			mov intitle, 0
	   00
 000001BA  E8 00000000 E			call clrscr
 000001BF  C6 05 000005A4 R			mov newLevel, 0
	   00
 000001C6  C3			ret
 000001C7			levelstart endp

				;----------------------------------------------
				;writes title with the o in block missing
				;so the block can take it's place
				;----------------------------------------------

 000001C7			writetitle proc
 000001C7  B8 00000000			mov eax, 0
 000001CC  B9 00000000			mov ecx, 0
 000001D1  BA 00000000			mov edx, 0
 000001D6  BB 00000000			mov ebx, 0

 000001DB  B6 0A			mov dh, 10
 000001DD  B2 2F			mov dl, 47
 000001DF  E8 00000000 E		call gotoxy
 000001E4  BA 00000000 R		mov edx, offset hunt1
 000001E9  E8 00000000 E		call writestring
 000001EE  B6 0B			mov dh, 11
 000001F0  B2 2F			mov dl, 47
 000001F2  E8 00000000 E		call gotoxy
 000001F7  BA 00000039 R		mov edx, offset hunt3
 000001FC  E8 00000000 E		call writestring
 00000201  B6 0C			mov dh, 12
 00000203  B2 2F			mov dl, 47
 00000205  E8 00000000 E		call gotoxy
 0000020A  BA 00000072 R		mov edx, offset hunt5
 0000020F  E8 00000000 E		call writestring
 00000214  B6 0D			mov dh, 13
 00000216  B2 2F			mov dl, 47
 00000218  E8 00000000 E		call gotoxy
 0000021D  BA 000000AB R		mov edx, offset hunt7
 00000222  E8 00000000 E		call writestring
 00000227  B6 0E			mov dh, 14
 00000229  B2 2F			mov dl, 47
 0000022B  E8 00000000 E		call gotoxy
 00000230  BA 000000E4 R		mov edx, offset hunt9
 00000235  E8 00000000 E		call writestring


 0000023A  B6 12			mov dh, 18 
 0000023C  B2 14			mov dl, 20
 0000023E  E8 00000000 E		call gotoxy
 00000243  BA 0000011D R		mov edx, offset red1
 00000248  E8 00000000 E		call writestring
 0000024D  B6 13			mov dh, 19
 0000024F  B2 14			mov dl, 20
 00000251  E8 00000000 E		call gotoxy
 00000256  BA 0000018D R		mov edx, offset red2
 0000025B  E8 00000000 E		call writestring

 00000260  B6 14			mov dh, 20
 00000262  B2 14			mov dl, 20
 00000264  E8 00000000 E		call gotoxy
 00000269  BA 000001FD R		mov edx, offset red3
 0000026E  E8 00000000 E		call writestring

 00000273  B6 15			mov dh, 21
 00000275  B2 14			mov dl, 20
 00000277  E8 00000000 E		call gotoxy
 0000027C  BA 0000026D R		mov edx, offset red4
 00000281  E8 00000000 E		call writestring

 00000286  B6 16			mov dh, 22
 00000288  B2 14			mov dl, 20
 0000028A  E8 00000000 E		call gotoxy
 0000028F  BA 000002DD R		mov edx, offset red5
 00000294  E8 00000000 E		call writestring

 00000299  B6 17			mov dh, 23
 0000029B  B2 14			mov dl, 20
 0000029D  E8 00000000 E		call gotoxy
 000002A2  BA 0000034C R		mov edx, offset red6
 000002A7  E8 00000000 E		call writestring

 000002AC  B6 18			mov dh, 24
 000002AE  B2 14			mov dl, 20
 000002B0  E8 00000000 E		call gotoxy
 000002B5  BA 000003BC R		mov edx, offset red7
 000002BA  E8 00000000 E		call writestring
 000002BF  C3			ret
 000002C0			writetitle endp

				;----------------------------------
				;prints your current score in block
				;also all other relevent user information
				;----------------------------------

 000002C0			writeInfo proc uses eax edx
 000002C2  BA 00000000			mov edx, 0
 000002C7  B2 87			mov dl, 135
 000002C9  B6 01			mov dh, 1
 000002CB  E8 00000000 E		call gotoxy
 000002D0  BA 000004A8 R		mov edx, offset output2
 000002D5  E8 00000000 E		call writeString

 000002DA  B6 02			mov dh, 2
 000002DC  A1 0000057D R		mov eax, yourScore
 000002E1  E8 0000025F			call printToCenter
 000002E6  E8 00000000 E		call gotoxy
 000002EB  E8 00000000 E		call writedec

 000002F0  B2 8A			mov dl, 138
 000002F2  B6 08			mov dh, 8
 000002F4  E8 00000000 E		call gotoxy
 000002F9  BA 000004B3 R		mov edx, offset output3
 000002FE  E8 00000000 E		call writeString

 00000303  B8 00000000			mov eax, 0
 00000308  B6 09			mov dh, 9
 0000030A  E8 00000236			call printToCenter
 0000030F  E8 00000000 E		call gotoxy
 00000314  A0 00000589 R		mov al, level
 00000319  E8 00000000 E		call writedec

 0000031E  B2 8A			mov dl, 138
 00000320  B6 0C			mov dh, 12
 00000322  E8 00000000 E		call gotoxy
 00000327  BA 000004BA R		mov edx, offset output4
 0000032C  E8 00000000 E		call writeString

 00000331  E8 00000160			call printLifeBar
 00000336  BA 00000000			mov edx, 0
 0000033B  B0 0F			mov al, 15
 0000033D  E8 00000000 E		call settextcolor

 00000342  B2 88			mov dl, 136
 00000344  B6 10			mov dh, 16
 00000346  E8 00000000 E		call gotoxy
 0000034B  BA 000004C0 R		mov edx, offset output5
 00000350  E8 00000000 E		call writestring
 00000355  B2 89			mov dl, 137
 00000357  B6 11			mov dh, 17
 00000359  E8 00000000 E		call gotoxy
 0000035E  BA 0000046E R		mov edx, offset topLifeBlock
 00000363  E8 00000000 E		call writestring
 00000368  B2 89			mov dl, 137
 0000036A  B6 12			mov dh, 18
 0000036C  E8 00000000 E		call gotoxy
 00000371  BA 00000476 R		mov edx, offset middleLifeBlock
 00000376  E8 00000000 E		call writestring
 0000037B  B2 89			mov dl, 137
 0000037D  B6 13			mov dh, 19
 0000037F  E8 00000000 E		call gotoxy
 00000384  BA 0000047E R		mov edx, offset bottomLifeBlock
 00000389  E8 00000000 E		call writestring

 0000038E  B2 8A			mov dl, 138
 00000390  B6 12			mov dh, 18
 00000392  E8 00000000 E		call gotoxy
 00000397  B9 00000005			mov ecx, 5 
 0000039C  BB 00000005			mov ebx, 5
 000003A1  2A 1D 00000577 R		sub bl, currentBlocksClicked
 000003A7  B0 A0			mov al, 160
 000003A9  E8 00000000 E		call settextcolor
 000003AE				clickspacecolor:
 000003AE  E8 00000000 E			call gotoxy
 000003B3  3B CB				cmp ecx, ebx
 000003B5  75 07				jne contclickcolor
 000003B7  B0 0F				mov al, 15
 000003B9  E8 00000000 E			call settextcolor
 000003BE				contclickColor:
 000003BE  B0 20				mov al, 32
 000003C0  83 F9 03				cmp ecx, 3
 000003C3  75 0C				jne notnumber
 000003C5  A0 00000577 R			mov al, currentBlocksClicked
 000003CA  E8 00000000 E			call writedec
 000003CF  EB 05				jmp number
 000003D1				notnumber:
 000003D1  E8 00000000 E			call writechar
 000003D6				number:
 000003D6  FE C2				inc dl
 000003D8  E2 D4			loop clickSpaceColor

 000003DA  B0 0F			mov al, 15
 000003DC  E8 00000000 E		call settextcolor

 000003E1  B2 88			mov dl, 136
 000003E3  B6 15			mov dh, 21
 000003E5  E8 00000000 E		call gotoxy
 000003EA  BA 000004CB R		mov edx, offset output6
 000003EF  E8 00000000 E		call writestring
 000003F4  B2 8A			mov dl, 138
 000003F6  B6 16			mov dh, 22
 000003F8  E8 00000000 E		call gotoxy
 000003FD  BA 00000486 R		mov edx, offset topClickBlock
 00000402  E8 00000000 E		call writestring
 00000407  B2 8A			mov dl, 138
 00000409  B6 17			mov dh, 23
 0000040B  E8 00000000 E		call gotoxy
 00000410  BA 0000048C R		mov edx, offset middleClickBlock
 00000415  E8 00000000 E		call writestring
 0000041A  B2 8A			mov dl, 138
 0000041C  B6 18			mov dh, 24
 0000041E  E8 00000000 E		call gotoxy
 00000423  BA 00000492 R		mov edx, offset bottomClickBlock
 00000428  E8 00000000 E		call writestring

 0000042D  B2 8A			mov dl, 138
 0000042F  B6 17			mov dh, 23
 00000431  E8 00000000 E		call gotoxy
 00000436  B9 00000003			mov ecx, 3 
 0000043B  BB 00000003			mov ebx, 3
 00000440  2A 1D 00000576 R		sub bl, currentClicks
 00000446  B0 A0			mov al, 160
 00000448  E8 00000000 E		call settextcolor
 0000044D				clickcolorspace:
 0000044D  FE C2				inc dl
 0000044F  E8 00000000 E			call gotoxy
 00000454  3B CB				cmp ecx, ebx
 00000456  75 07				jne contclickcolor2
 00000458  B0 0F				mov al, 15
 0000045A  E8 00000000 E			call settextcolor
 0000045F				contclickColor2:
 0000045F  B0 20				mov al, 32
 00000461  83 F9 02				cmp ecx, 2
 00000464  75 0C				jne notnumber2
 00000466  A0 00000576 R			mov al, currentClicks
 0000046B  E8 00000000 E			call writedec
 00000470  EB 05				jmp number2
 00000472				notnumber2:
 00000472  E8 00000000 E			call writechar
 00000477				number2:
 00000477  E2 D4			loop clickcolorspace

 00000479  B0 0F			mov al, 15
 0000047B  E8 00000000 E		call settextcolor
 00000480  B6 1B			mov dh, 27
 00000482  B2 84			mov dl, 132
 00000484  E8 00000000 E		call gotoxy
 00000489  BA 000004F9 R		mov edx, offset output8
 0000048E  E8 00000000 E		call writestring
				ret
 00000496			writeinfo endp

 00000496			printLifeBar proc uses eax ecx edx
 00000499  B8 00000000			mov eax, 0
 0000049E  B9 00000000			mov ecx, 0
 000004A3  BA 00000000			mov edx, 0

 000004A8  B2 89			mov dl, 137
 000004AA  B6 0D			mov dh, 13
 000004AC  E8 00000000 E		call gotoxy
 000004B1  BA 0000046E R		mov edx, offset topLifeBlock
 000004B6  E8 00000000 E		call writestring
 000004BB  BA 00000000			mov edx, 0

 000004C0  B2 89			mov dl, 137
 000004C2  B6 0E			mov dh, 14
 000004C4  E8 00000000 E		call gotoxy
 000004C9  BA 00000476 R		mov edx, offset middleLifeBlock
 000004CE  E8 00000000 E		call writestring
 000004D3  BA 00000000			mov edx, 0

 000004D8  B2 89			mov dl, 137
 000004DA  B6 0F			mov dh, 15
 000004DC  E8 00000000 E		call gotoxy
 000004E1  BA 0000047E R		mov edx, offset bottomLifeBlock
 000004E6  E8 00000000 E		call writestring
 000004EB  BA 00000000			mov edx, 0

 000004F0  B9 00000000			mov ecx, 0
 000004F5  BB 00000000			mov ebx, 0
 000004FA  B9 00000005			mov ecx, 5
 000004FF  BB 00000005			mov ebx, 5
 00000504  2A 1D 0000057C R		sub bl, lives
 0000050A  B0 A0			mov al, 160
 0000050C  E8 00000000 E		call settextcolor
 00000511  B2 8A			mov dl, 138
 00000513  B6 0E			mov dh,14
 00000515				colorlifebar:
 00000515  E8 00000000 E			call gotoxy
 0000051A  3B CB				cmp ecx, ebx
 0000051C  75 07				jne contcolorlife
 0000051E  B0 C5				mov al, 197
 00000520  E8 00000000 E			call settextcolor
 00000525				contcolorlife:
 00000525  B0 20				mov al, 32
 00000527  83 F9 03				cmp ecx, 3
 0000052A  75 0C				jne notnumber
 0000052C  A0 0000057C R			mov al, lives
 00000531  E8 00000000 E			call writedec
 00000536  EB 05				jmp number
 00000538				notnumber:
 00000538  E8 00000000 E			call writechar
 0000053D				number:
 0000053D  FE C2				inc dl
 0000053F  E2 D4			loop colorlifebar
				ret
 00000545			printLifeBar endp

				;------------------------------------
				;takes whats in eax and determines
				;where the center should be in score block
				;only changed the column, not row.
				;set dh before you call gotoxy
				;-------------------------------------------

 00000545			printToCenter proc
 00000545  83 F8 0A			cmp eax, 10
 00000548  7C 13			jl one_Digit
 0000054A  83 F8 64			cmp eax, 100
 0000054D  7C 12			jl two_Digit
 0000054F  3D 00002710			cmp eax, 10000
 00000554  7C 0F			jl four_Digit
 00000556  3D 000F4240			cmp eax, 1000000
 0000055B  7C 0C			jl six_Digit

 0000055D				one_Digit:
 0000055D  B2 8C				mov dl, 140
 0000055F  EB 0A				jmp cont_Center
 00000561				two_Digit:
 00000561  B2 8B				mov dl, 139
 00000563  EB 06				jmp cont_Center	
 00000565				four_Digit:
 00000565  B2 8B				mov dl, 139
 00000567  EB 02				jmp cont_Center
 00000569				six_Digit:
 00000569  B2 87				mov dl, 135
 0000056B				cont_Center:
 0000056B  C3			ret
 0000056C			printToCenter endp

				;----------------------------------------------
				;prints block where information goes
				;----------------------------------------------

 0000056C			writeBlock proc uses eax ecx edx
 0000056F  E8 00000666			call drawRail
 00000574  B0 82			mov al, 130
 00000576  B4 00			mov ah, 0
 00000578  B2 82			mov dl, 130
 0000057A  B6 00			mov dh, 0
 0000057C  E8 00000000 E		call gotoxy
 00000581  BA 0000042F R		mov edx, offset topBlock
 00000586  E8 00000000 E		call writeString
 0000058B  FE C4			inc ah
 0000058D  B9 0000002D			mov ecx, 45
 00000592				loopBlock:
 00000592  8A D0				mov dl, al
 00000594  8A F4				mov dh, ah
 00000596  E8 00000000 E			call gotoxy
 0000059B  BA 00000444 R			mov edx, offset middleBlock
 000005A0  E8 00000000 E			call writeString
 000005A5  FE C4				inc ah
 000005A7  E2 E9			loop loopBlock
 000005A9  8A D0			mov dl, al
 000005AB  8A F4			mov dh, ah
 000005AD  E8 00000000 E		call gotoxy
 000005B2  BA 00000459 R		mov edx, offset BottomBlock
 000005B7  E8 00000000 E		call writeString
				ret
 000005C0			writeBlock endp
				 
				;---------------------------------
				;display box for a certain amount of time
				;also prints score inside block
				;---------------------------------

 000005C0			countdown proc uses eax ecx edx
 000005C3  B8 00000000		 	mov eax, 0
 000005C8  BB 00000000			mov ebx, 0
 000005CD  BA 00000000			mov edx, 0
 000005D2  B9 00000000			mov ecx, 0
 000005D7  E8 00000000 E		call getMseconds
 000005DC  A3 0000058E R		mov lastTime, eax
 000005E1  B9 00000001			mov ecx, 1
 000005E6  B8 00000000			mov eax, 0
 000005EB  B0 0F			mov al, 15
 000005ED  E8 00000000 E		call setTextColor
 000005F2  8A 15 0000042E R		mov dl, inTitle
 000005F8  80 FA 01			cmp dl, 1
 000005FB  74 13			je scoreloop
 000005FD  B2 8A			mov dl, 138
 000005FF  B6 04			mov dh, 4
 00000601  E8 00000000 E		call gotoxy
 00000606  BA 000004A2 R		mov edx, offset output
 0000060B  E8 00000000 E		call writestring
 00000610				scoreloop:
 00000610  A0 000004A1 R			mov al, whiteColor
 00000615  E8 00000000 E			call settextcolor
 0000061A  E8 00000000 E			call getMseconds
 0000061F  BA 00000000				mov edx,0
 00000624  2B 05 0000058E R			sub eax, lastTime
 0000062A  A3 0000058A R			mov currTime, eax
 0000062F  A1 00000581 R			mov eax, seconds
 00000634  2B 05 0000058A R			sub eax, currTime
 0000063A  BB 00000005				mov ebx, 5
 0000063F  F7 F3				div ebx
 00000641  83 FA 00				cmp edx, 0
 00000644  75 2D				jnz dont_Print
 00000646  8A 15 0000042E R			mov dl, inTitle
 0000064C  80 FA 01				cmp dl, 1
 0000064F  74 22				je dont_print
 00000651  A3 00000592 R			mov tempScore, eax
 00000656  B6 05				mov dh, 5
 00000658  E8 FFFFFEE8				call printtocenter
 0000065D  E8 00000000 E			call gotoxy
 00000662  E8 00000000 E			call writedec
 00000667  A1 0000058A R			mov eax, currTime
 0000066C  B0 20				mov al, ' '
 0000066E  E8 00000000 E			call writechar
 00000673				dont_Print: 
 00000673  A1 00000581 R			mov eax, seconds
 00000678  2B 05 0000058A R			sub eax, currTime
 0000067E  BB 000001F4				mov ebx, 500
 00000683  BA 00000000				mov edx, 0
 00000688  F7 F3				div ebx
 0000068A  83 FA 00				cmp edx, 0
 0000068D  75 0E				jnz dontmovethebox
 0000068F  80 3D 00000579 R			cmp movementOn, 1
	   01
 00000696  75 05				jne dontmovethebox
 00000698  E8 000003A9				call moveBlock
 0000069D				dontmovethebox:
						checkBounds mouse
 00000CC4		     1		.data
 0000069D		     1		.code
 000006A7  80 3D 00000578 R			cmp blockClicked, 0
	   00
 000006AE  74 0E				je clickBlock1
 000006B0  C6 05 00000578 R			mov blockClicked, 0
	   00
 000006B7  B9 00000000				mov ecx, 0
 000006BC  EB 1C				jmp cont
 000006BE				clickBlock1:
 000006BE  8B 1D 00000581 R			mov ebx, seconds
 000006C4  81 EB 000000C8			sub ebx, 200
 000006CA  3B C3				cmp eax, ebx
 000006CC  7F 02				jg stoploop
 000006CE  7E 0A				jle cont
 000006D0				stoploop:
 000006D0  B9 00000000				mov ecx, 0
 000006D5  E8 000002D0				call clickMiss
 000006DA				cont: 
 000006DA  83 F9 00				cmp ecx, 0
 000006DD  0F 8F FFFFFF2D			jg scoreloop
 000006E3  8A 15 0000049D R			mov dl, currentCol
 000006E9  8A 35 0000049C R			mov dh, currentRow
 000006EF  80 C6 03				add dh, 3
 000006F2  E8 00000000 E			call gotoxy
				ret
 000006FB			countdown endp

				 ;--------------------------------------
				 ;makes the red block you have to click
				 ;--------------------------------------

 000006FB			makeRect proc uses eax ebx ecx edx
 000006FF  B8 00000000			mov eax, 0
 00000704  BB 00000000			mov ebx, 0
 00000709  BA 00000000			mov edx, 0
 0000070E  B9 00000000			mov ecx, 0
 00000713  8A 15 0000042D R		mov dl, firstTime
 00000719  80 FA 01			cmp dl, 1
 0000071C  75 0D			jne rndPos
 0000071E  B6 14			mov dh, 20
 00000720  B2 3E			mov dl, 62
 00000722  C6 05 0000042D R		mov firstTime, 0
	   00
 00000729  EB 2A			jmp setPos
 0000072B				rndPos:
 0000072B  66| 0F B6 05				movzx ax, gameWidth
	   0000049A R
 00000733  2A 05 0000049F R			sub al, boxWidth
 00000739  E8 00000000 E			call randomrange
 0000073E  8A D0				mov dl, al
 00000740  66| 0F B6 05				movzx ax, gameHeight
	   0000049B R
 00000748  2A 05 0000049E R			sub al, boxheight
 0000074E  E8 00000000 E			call randomRange
 00000753  8A F0				mov dh, al
 00000755				setPos:
 00000755  E8 00000000 E			call gotoxy
 0000075A  88 15 0000049D R			mov currentCol, dl
 00000760  88 35 0000049C R			mov currentRow, dh
 00000766  0F B6 0D				movzx ecx, boxHeight
	   0000049E R
 0000076D				makeBox:
 0000076D  A0 000004A0 R			mov al, boxColor
 00000772  E8 00000000 E			call setTextColor
 00000777  8B D9				mov ebx, ecx
 00000779  0F B6 0D				movzx ecx, boxWidth
	   0000049F R
 00000780					makeBox2:
 00000780  B0 20					mov al, ' '
 00000782  E8 00000000 E				call writechar
 00000787  FE C2					inc dl
 00000789  E8 00000000 E				call gotoxy
 0000078E  E2 F0				loop makeBox2
 00000790  8B CB				mov ecx, ebx
 00000792  2A 15 0000049F R			sub dl, boxWidth
 00000798  FE C6				inc dh
 0000079A  E8 00000000 E			call gotoxy
 0000079F  E2 CC			loop makeBox
				ret
 000007A6			makeRect endp

				;---------------------------------------
				;mouse click
				;---------------------------------------

 000007A6			MouseEventInput PROC uses eax ebx,
				prtPoint: DWORD 
					invoke GetStdHandle, STD_INPUT_HANDLE
 000007B2  A3 00000AD3 R		mov hStdIn, eax
					invoke GetConsoleMode, hStdIn, ADDR ConsoleMode
 000007C7  B8 00000090			mov eax, 0090h
					invoke SetConsoleMode, hStdIn, eax
					invoke GetNumberOfConsoleInputEvents, hStdIn, ADDR eventsRead
 000007E8  A1 0000059E R		mov eax, eventsRead
 000007ED  83 F8 00			cmp eax, 0
 000007F0  74 6A			jz done
					invoke ReadConsoleInput, hStdIn, ADDR InputRecord, 1, ADDR nRead
 00000809  66| 8B 15			mov dx, InputRecord.KeyEvent.uChar
	   00000ACD R
 00000810  3A 15 00000665 R		cmp dl, hKey
 00000816  75 05			jne notHKey
 00000818  E8 00000045			call buildHelpBox
 0000081D				notHKey:
 0000081D  A1 00000AC7 R			mov  eax, InputRecord.MouseEvent.dwButtonState
 00000822  83 F8 01				cmp eax, 1
 00000825  74 02				je quit
 00000827  EB 33				jmp done
 00000829				quit:
 00000829  8B 75 08				mov esi, prtPoint
						ASSUME esi : ptr COORD
 0000082C  66| 89 06				mov [esi].x,ax
 0000082F  66| 89 5E 02				mov [esi].y, bx
						ASSUME esi : NOTHING
 00000833  B8 00000000				mov eax, 0
 00000838  BB 00000000				mov ebx, 0
 0000083D  66| A1				mov ax, InputRecord.MouseEvent.dwMousePosition.x
	   00000AC3 R
 00000843  66| 8B 1D				mov bx, InputRecord.MouseEvent.dwMousePosition.y
	   00000AC5 R
 0000084A  66| A3				mov mouseClickx, ax
	   0000059A R
 00000850  66| 89 1D				mov mouseClicky, bx
	   0000059C R
 00000857  E8 0000001A				call clicked
 0000085C				done:
				RET
 00000862			MouseEventInput ENDP

 00000862			buildHelpBox proc uses edx ebx
 00000864  BB 000005A5 R		mov ebx, OFFSET helpTitle
 00000869  BA 000005D4 R		mov edx, OFFSET help1
 0000086E  E8 00000000 E		call msgbox
				ret
 00000876			buildHelpBox endp

				;------------------------------------------------
				;tests position of click to block
				;also changes lives, currentclicks, currentblocksclicked
				;and level
				;------------------------------------------------
 00000876			clicked proc uses eax ebx ecx edx
 0000087A  B8 00000000			mov eax, 0
 0000087F  BB 00000000			mov ebx, 0
 00000884  B9 00000000			mov ecx, 0
 00000889  BA 00000000			mov edx, 0
 0000088E  66| A1			mov ax, mouseClickX
	   0000059A R
 00000894  66| 8B 1D			mov bx, mouseClickY
	   0000059C R
 0000089B  66| 0F B6 15			movzx dx, currentCol
	   0000049D R
 000008A3  66| 3B C2			cmp ax, dx
 000008A6  74 04			je click_on_X
 000008A8  7F 18			jg check_bound_click_x
 000008AA  7C 4A			jl click_miss

 000008AC				click_on_x:
 000008AC  BA 00000000				mov edx, 0
 000008B1  66| 0F B6 15				movzx dx, currentRow
	   0000049C R
 000008B9  66| 3B DA				cmp bx, dx
 000008BC  74 42				je clicked_on
 000008BE  7F 1C				jg check_bound_y
 000008C0  7C 34				jl click_miss
 000008C2				check_bound_click_x:
 000008C2  66| 0F B6 15				movzx dx, currentCol
	   0000049D R
 000008CA  66| 0F B6 0D				movzx cx, boxWidth
	   0000049F R
 000008D2  66| 03 D1				add dx, cx
 000008D5  66| 3B C2				cmp ax, dx
 000008D8  7E D2				jle click_on_x
 000008DA  7F 1A				jg click_miss
 000008DC				check_bound_y:
 000008DC  66| 0F B6 15				movzx dx, currentRow
	   0000049C R
 000008E4  66| 0F B6 0D				movzx cx, boxHeight
	   0000049E R
 000008EC  66| 03 D1				add dx, cx
 000008EF  66| 3B DA				cmp bx, dx
 000008F2  7E 0C				jle clicked_on
 000008F4  7F 00				jg click_miss 
 000008F6				click_miss:
 000008F6  E8 000000AF				call clickMiss
 000008FB  E9 00000096				jmp click_Cont
 00000900				clicked_on:
 00000900  C6 05 0000042C R			mov clickedLast, 1
	   01
 00000907  B8 00000000				mov eax, 0
 0000090C  BB 00000000				mov ebx, 0
 00000911  A1 00000592 R			mov eax, tempScore
 00000916  8B 1D 0000057D R			mov ebx, yourScore
 0000091C  03 D8				add ebx, eax
 0000091E  89 1D 0000057D R			mov yourScore, ebx
 00000924  C6 05 00000578 R			mov blockClicked, 1
	   01
 0000092B  80 3D 0000057C R			cmp lives, 5
	   05
 00000932  7D 1C				jge noNewLife
 00000934  FE 05 00000576 R			inc [currentClicks]
 0000093A  80 3D 00000576 R			cmp currentClicks, 3
	   03
 00000941  7E 0D				jle noNewLife
 00000943  FE 05 0000057C R			inc [lives]
 00000949  C6 05 00000576 R			mov currentClicks, 0
	   00
 00000950				noNewLife: 
 00000950  FE 05 00000577 R			inc [currentBlocksClicked]
 00000956  80 3D 00000577 R			cmp currentBlocksClicked, 5
	   05
 0000095D  7E 05				jle noincLevel
 0000095F  E8 000001BD				call incLevel
 00000964				noincLevel:
 00000964  80 3D 0000057A R			cmp movex, 1
	   01
 0000096B  74 09				je makemovex1
 0000096D  C6 05 0000057A R			mov movex, 1
	   01
 00000974  EB 07				jmp changemovey
 00000976				makemovex1:
 00000976  C6 05 0000057A R			mov movex, -1
	   FF
 0000097D				changemovey:
 0000097D  80 3D 0000057B R			cmp movey, 1
	   01
 00000984  74 09				je makemovey1
 00000986  C6 05 0000057B R			mov movey, 1
	   01
 0000098D  EB 07				jmp click_Cont
 0000098F				makemovey1:
 0000098F  C6 05 0000057B R			mov movey, -1
	   FF
 00000996				click_Cont:
 00000996  A0 000004A1 R			mov al, whiteColor
 0000099B  E8 00000000 E			call settextcolor
 000009A0  E8 00000000 E			call clrScr
				ret
 000009AA			clicked endp

 000009AA			clickMiss proc
 000009AA  8A 15 0000042E R		mov dl, inTitle
 000009B0  80 FA 01			cmp dl, 1
 000009B3  74 19			je dontEndGame
 000009B5  FE 0D 0000057C R		dec [lives]
 000009BB  80 3D 0000057C R		cmp lives, 0
	   00
 000009C2  7F 0A			jg dontendgame
 000009C4  E8 000001CA			call endscreen
 000009C9  E8 00000000 E		call readInt
 000009CE				dontendgame:
 000009CE  C6 05 00000576 R			mov currentClicks, 0
	   00
 000009D5  C6 05 00000578 R			mov blockClicked, 1
	   01
 000009DC  C3			ret
 000009DD			clickMiss endp

				;----------------------------------------
				;deletes only the red block
				;------------------------------------

 000009DD			deleteBox proc uses eax ebx ecx edx
 000009E1  B8 00000000			mov eax, 0
 000009E6  BB 00000000			mov ebx, 0
 000009EB  BA 00000000			mov edx, 0
 000009F0  B9 00000000			mov ecx, 0
 000009F5  8A 15 0000049D R		mov dl,currentCol
 000009FB  8A 35 0000049C R		mov dh,currentRow
 00000A01  E8 00000000 E		call gotoxy
 00000A06  0F B6 0D			movzx ecx, boxHeight
	   0000049E R
 00000A0D				makeBox:
 00000A0D  A0 000004A1 R			mov al, whiteColor
 00000A12  E8 00000000 E			call setTextColor
 00000A17  8B D9				mov ebx, ecx
 00000A19  0F B6 0D				movzx ecx, boxWidth
	   0000049F R
 00000A20					makeBox2:
 00000A20  B0 20					mov al, ' '
 00000A22  E8 00000000 E				call writechar
 00000A27  FE C2					inc dl
 00000A29  E8 00000000 E				call gotoxy
 00000A2E  E2 F0				loop makeBox2
 00000A30  8B CB				mov ecx, ebx
 00000A32  2A 15 0000049F R			sub dl, boxWidth
 00000A38  FE C6				inc dh
 00000A3A  E8 00000000 E			call gotoxy
 00000A3F  E2 CC			loop makeBox
				ret
 00000A46			deleteBox endp

				;----------------------------------------------------------
				;moves the block, and changes direction when it hits a wall
				;----------------------------------------------------------

 00000A46			moveBlock proc uses eax ebx ecx edx

 00000A4A  E8 FFFFFF8E			call deleteBox

 00000A4F  B8 00000000			mov eax, 0
 00000A54  02 05 0000049D R		add al, currentCol
 00000A5A  02 05 0000049F R		add al, boxWidth
					;add al, 1
 00000A60  3A 05 0000049A R		cmp al, gameWidth
 00000A66  7C 07			jl nochangex
 00000A68  C6 05 0000057A R		mov movex, -1
	   FF
 00000A6F				nochangex:
 00000A6F  A0 0000049D R			mov al, currentCol
						;sub al, 1
 00000A74  3C 00				cmp al, 0
 00000A76  7F 07				jg nochangex2
 00000A78  C6 05 0000057A R			mov movex, 1
	   01
 00000A7F				nochangex2:
 00000A7F  B8 00000000				mov eax, 0
 00000A84  02 05 0000049C R			add al, currentRow
 00000A8A  02 05 0000049E R			add al, boxHeight
						;add al, 1
 00000A90  3A 05 0000049B R			cmp al, gameHeight
 00000A96  7C 07				jl nochangey
 00000A98  C6 05 0000057B R			mov movey, -1
	   FF
 00000A9F				nochangey:
 00000A9F  A0 0000049C R			mov al, currentRow
						;sub al, 1
 00000AA4  83 F8 00				cmp eax, 0
 00000AA7  7F 07				jg nochangey2
 00000AA9  C6 05 0000057B R			mov movey, 1
	   01
 00000AB0				nochangey2:
 00000AB0  B8 00000000				mov eax, 0
 00000AB5  A0 0000057A R			mov al, movex
 00000ABA  00 05 0000049D R			add currentCol, al
 00000AC0  B8 00000000				mov eax, 0
 00000AC5  A0 0000057B R			mov al, movey
 00000ACA  00 05 0000049C R			add currentRow, al
 00000AD0  8A 15 0000049D R			mov dl,currentCol 
 00000AD6  8A 35 0000049C R			mov dh,currentRow
 00000ADC  E8 00000000 E			call gotoxy
 00000AE1  0F B6 0D				movzx ecx, boxHeight
	   0000049E R
 00000AE8				moveBox:
 00000AE8  A0 000004A0 R			mov al, boxColor
 00000AED  E8 00000000 E			call setTextColor
 00000AF2  8B D9				mov ebx, ecx
 00000AF4  0F B6 0D				movzx ecx, boxWidth
	   0000049F R
 00000AFB					moveBox2:
 00000AFB  B0 20					mov al, ' '
 00000AFD  E8 00000000 E				call writechar
 00000B02  FE C2					inc dl
 00000B04  E8 00000000 E				call gotoxy
 00000B09  E2 F0				loop moveBox2
 00000B0B  8B CB				mov ecx, ebx
 00000B0D  2A 15 0000049F R			sub dl, boxWidth
 00000B13  FE C6				inc dh
 00000B15  E8 00000000 E			call gotoxy
 00000B1A  E2 CC			loop moveBox
				ret
 00000B21			moveBlock endp

				;-------------------------------------
				;increases level
				;TODO increase difficulty
				;--------------------------------------

 00000B21			incLevel proc uses eax ebx edx
 00000B24  C6 05 00000577 R		mov currentBlocksClicked, 0
	   00
 00000B2B  FE 05 00000589 R		inc [level]
 00000B31  B8 00000000			mov eax, 0
 00000B36  A0 00000589 R		mov al, level
 00000B3B  BB 00000000			mov ebx, 0
 00000B40  B3 02			mov bl, 2 
 00000B42  F6 F3			div bl
 00000B44  A0 00000589 R		mov al, level
 00000B49  80 FE 01			cmp dh, 1
 00000B4C  74 1E			je samesize
 00000B4E  80 3D 0000049F R		cmp boxWidth, 2
	   02
 00000B55  74 06			je widthcont
 00000B57  FE 0D 0000049F R		dec [boxWidth]
 00000B5D				widthcont:
 00000B5D  80 3D 0000049E R			cmp boxHeight, 2
	   02
 00000B64  74 06				je heightcont
 00000B66  FE 0D 0000049E R			dec [boxHeight]
 00000B6C				heightcont:
 00000B6C				samesize:
 00000B6C  3C 03				cmp al, 3
 00000B6E  75 07				jne notlevel3
 00000B70  80 2D 0000049F R			sub [boxWidth],2
	   02
 00000B77				notlevel3:
 00000B77  3C 04				cmp al, 4
 00000B79  75 07				jne notlevel4
 00000B7B  C6 05 00000579 R			mov movementOn, 1
	   01
 00000B82				notlevel4:
 00000B82  C6 05 000005A4 R			mov newlevel, 1
	   01
				ret
 00000B8D			incLevel endp

				;-------------------------------------------
				;Closes game right now
				;-----------------------------------------

 00000B8D			you_lose proc
 00000B8D  E8 00000001			call endscreen
 00000B92  C3			ret
 00000B93			you_lose endp

				; ------------------------------------------ 
				;  display end game splash
				; ---------------------------------------- -

 00000B93			endscreen proc
 00000B93  B0 04			mov al, COLOR_RED
 00000B95  E8 00000000 E		call setTextColor
 00000B9A  B6 11			mov dh,17
 00000B9C  E8 00000000 E		call gotoxy
 00000BA1  B9 00000009			mov ecx, 9
 00000BA6  BA 000006FD R		mov edx, offset gameover0

 00000BAB				L1:
 00000BAB  E8 00000000 E			call writeString
 00000BB0  B8 0000006B				mov eax, gosize + 1 
 00000BB5  03 D0				add edx, eax
 00000BB7  E8 00000000 E			call crlf 
 00000BBC  E2 ED			loop L1
 00000BBE  B0 0E			mov al, COLOR_YELLOW
 00000BC0  E8 00000000 E		call setTextColor
 00000BC5  BA 00000543 R		mov edx, offset thx
 00000BCA  E8 00000000 E		call writeString
 00000BCF  BA 00000562 R		mov edx, offset player
 00000BD4  E8 00000000 E		call writeString
 00000BD9  C3			ret
 00000BDA			endscreen endp

				; ------------------------------------------ -
				; Draw bottom graphics
				; ---------------------------------------- -

 00000BDA			drawRail proc
 00000BDA  E8 00000000 E			call getTextColor
 00000BDF  50					push eax
 00000BE0  60					pusha
 00000BE1  B7 0E				mov bh, COLOR_YELLOW
 00000BE3  B3 04				mov bl, COLOR_RED
 00000BE5  B2 00				mov dl, 0
 00000BE7  B6 31				mov dh, 49
 00000BE9  E8 00000000 E			call gotoxy
 00000BEE  52					push edx
 00000BEF  8A C7				mov al, bh
 00000BF1  E8 00000000 E			call setTextColor
 00000BF6  BA 00000666 R			mov edx, offset rail_line
 00000BFB  E8 00000000 E			call writeString
 00000C00  5A					pop edx
 00000C01  FE C6				inc dh
 00000C03  E8 00000000 E			call gotoxy
 00000C08  BA 00000000				mov edx, 0
 00000C0D					draw:
 00000C0D  42						inc edx
 00000C0E  8A C7					mov al, bh
 00000C10  E8 00000000 E				call setTextColor
 00000C15  B0 DF					mov al, 223
 00000C17  E8 00000000 E				call writeChar

 00000C1C  4A						dec edx
 00000C1D  8A C3					mov al, bl
 00000C1F  E8 00000000 E				call setTextColor
 00000C24  B0 DF					mov al, 223
 00000C26  E8 00000000 E				call writeChar

 00000C2B  83 C2 02					add edx, 2
 00000C2E  81 FA 00000096				cmp edx, 150
 00000C34  7D 02					jge done
 00000C36  EB D5					jmp draw
						
 00000C38					done :
 00000C38  B0 0F					mov al, COLOR_DEFAULT
 00000C3A  E8 00000000 E				call setTextColor
 00000C3F  B2 00					mov dl, 0
 00000C41  B6 2B					mov dh, 43
 00000C43  E8 00000000 E				call gotoxy
 00000C48  BA 00000ADF R				mov edx, offset car0
 00000C4D  B9 00000005					mov ecx, 5
 00000C52						L2:
 00000C52  E8 00000000 E					call crlf

 00000C57  E8 00000000 E					call writeString
 00000C5C  B8 00000061						mov eax, carsize
 00000C61  03 D0						add edx, eax
 00000C63  E2 ED					loop L2
 00000C65  61						popa
 00000C66  58						pop eax
 00000C67  E8 00000000 E				call setTextColor
 00000C6C  C3			ret
 00000C6D			drawRail endp

				end main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/06/16 19:39:13
..\..\..\..\..\Desktop\huntForTheRedBlocktober.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

checkBounds  . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord
_INPUT_RECORD  . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  MouseEvent . . . . . . . . . .	 00000004	 XmmWord
  WindowBufferSizeEvent  . . . .	 00000004	 DWord
  MenuEvent  . . . . . . . . . .	 00000004	 DWord
  FocusEvent . . . . . . . . . .	 00000004	 DWord
  KeyEvent . . . . . . . . . . .	 00000004	 XmmWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000CC4 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000C6D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MouseEventInput  . . . . . . . .	P Near	 000007A6 _TEXT	Length= 000000BC Public STDCALL
  prtPoint . . . . . . . . . . .	DWord	 bp + 00000008
  notHKey  . . . . . . . . . . .	L Near	 0000081D _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000829 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000085C _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
buildHelpBox . . . . . . . . . .	P Near	 00000862 _TEXT	Length= 00000014 Public STDCALL
clickMiss  . . . . . . . . . . .	P Near	 000009AA _TEXT	Length= 00000033 Public STDCALL
  dontendgame  . . . . . . . . .	L Near	 000009CE _TEXT	
clicked  . . . . . . . . . . . .	P Near	 00000876 _TEXT	Length= 00000134 Public STDCALL
  click_on_x . . . . . . . . . .	L Near	 000008AC _TEXT	
  check_bound_click_x  . . . . .	L Near	 000008C2 _TEXT	
  check_bound_y  . . . . . . . .	L Near	 000008DC _TEXT	
  click_miss . . . . . . . . . .	L Near	 000008F6 _TEXT	
  clicked_on . . . . . . . . . .	L Near	 00000900 _TEXT	
  noNewLife  . . . . . . . . . .	L Near	 00000950 _TEXT	
  noincLevel . . . . . . . . . .	L Near	 00000964 _TEXT	
  makemovex1 . . . . . . . . . .	L Near	 00000976 _TEXT	
  changemovey  . . . . . . . . .	L Near	 0000097D _TEXT	
  makemovey1 . . . . . . . . . .	L Near	 0000098F _TEXT	
  click_Cont . . . . . . . . . .	L Near	 00000996 _TEXT	
countdown  . . . . . . . . . . .	P Near	 000005C0 _TEXT	Length= 0000013B Public STDCALL
  scoreloop  . . . . . . . . . .	L Near	 00000610 _TEXT	
  dont_Print . . . . . . . . . .	L Near	 00000673 _TEXT	
  dontmovethebox . . . . . . . .	L Near	 0000069D _TEXT	
  clickBlock1  . . . . . . . . .	L Near	 000006BE _TEXT	
  stoploop . . . . . . . . . . .	L Near	 000006D0 _TEXT	
  cont . . . . . . . . . . . . .	L Near	 000006DA _TEXT	
deleteBox  . . . . . . . . . . .	P Near	 000009DD _TEXT	Length= 00000069 Public STDCALL
  makeBox  . . . . . . . . . . .	L Near	 00000A0D _TEXT	
  makeBox2 . . . . . . . . . . .	L Near	 00000A20 _TEXT	
drawRail . . . . . . . . . . . .	P Near	 00000BDA _TEXT	Length= 00000093 Public STDCALL
  draw . . . . . . . . . . . . .	L Near	 00000C0D _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000C38 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000C52 _TEXT	
endscreen  . . . . . . . . . . .	P Near	 00000B93 _TEXT	Length= 00000047 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000BAB _TEXT	
incLevel . . . . . . . . . . . .	P Near	 00000B21 _TEXT	Length= 0000006C Public STDCALL
  widthcont  . . . . . . . . . .	L Near	 00000B5D _TEXT	
  heightcont . . . . . . . . . .	L Near	 00000B6C _TEXT	
  samesize . . . . . . . . . . .	L Near	 00000B6C _TEXT	
  notlevel3  . . . . . . . . . .	L Near	 00000B77 _TEXT	
  notlevel4  . . . . . . . . . .	L Near	 00000B82 _TEXT	
levelstart . . . . . . . . . . .	P Near	 0000014A _TEXT	Length= 0000007D Public STDCALL
  levelloop  . . . . . . . . . .	L Near	 00000158 _TEXT	
mainscreen . . . . . . . . . . .	P Near	 000000D3 _TEXT	Length= 00000077 Public STDCALL
  titleloop  . . . . . . . . . .	L Near	 000000F8 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000D3 Public STDCALL
  loopGame . . . . . . . . . . .	L Near	 0000000A _TEXT	
  loopnoclick  . . . . . . . . .	L Near	 00000023 _TEXT	
  continueloop . . . . . . . . .	L Near	 00000090 _TEXT	
  nonewlevel . . . . . . . . . .	L Near	 000000A1 _TEXT	
makeRect . . . . . . . . . . . .	P Near	 000006FB _TEXT	Length= 000000AB Public STDCALL
  rndPos . . . . . . . . . . . .	L Near	 0000072B _TEXT	
  setPos . . . . . . . . . . . .	L Near	 00000755 _TEXT	
  makeBox  . . . . . . . . . . .	L Near	 0000076D _TEXT	
  makeBox2 . . . . . . . . . . .	L Near	 00000780 _TEXT	
moveBlock  . . . . . . . . . . .	P Near	 00000A46 _TEXT	Length= 000000DB Public STDCALL
  nochangex  . . . . . . . . . .	L Near	 00000A6F _TEXT	
  nochangex2 . . . . . . . . . .	L Near	 00000A7F _TEXT	
  nochangey  . . . . . . . . . .	L Near	 00000A9F _TEXT	
  nochangey2 . . . . . . . . . .	L Near	 00000AB0 _TEXT	
  moveBox  . . . . . . . . . . .	L Near	 00000AE8 _TEXT	
  moveBox2 . . . . . . . . . . .	L Near	 00000AFB _TEXT	
printLifeBar . . . . . . . . . .	P Near	 00000496 _TEXT	Length= 000000AF Public STDCALL
  colorlifebar . . . . . . . . .	L Near	 00000515 _TEXT	
  contcolorlife  . . . . . . . .	L Near	 00000525 _TEXT	
  notnumber  . . . . . . . . . .	L Near	 00000538 _TEXT	
  number . . . . . . . . . . . .	L Near	 0000053D _TEXT	
printToCenter  . . . . . . . . .	P Near	 00000545 _TEXT	Length= 00000027 Public STDCALL
  one_Digit  . . . . . . . . . .	L Near	 0000055D _TEXT	
  two_Digit  . . . . . . . . . .	L Near	 00000561 _TEXT	
  four_Digit . . . . . . . . . .	L Near	 00000565 _TEXT	
  six_Digit  . . . . . . . . . .	L Near	 00000569 _TEXT	
  cont_Center  . . . . . . . . .	L Near	 0000056B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeBlock . . . . . . . . . . .	P Near	 0000056C _TEXT	Length= 00000054 Public STDCALL
  loopBlock  . . . . . . . . . .	L Near	 00000592 _TEXT	
writeInfo  . . . . . . . . . . .	P Near	 000002C0 _TEXT	Length= 000001D6 Public STDCALL
  clickspacecolor  . . . . . . .	L Near	 000003AE _TEXT	
  contclickColor . . . . . . . .	L Near	 000003BE _TEXT	
  notnumber  . . . . . . . . . .	L Near	 000003D1 _TEXT	
  number . . . . . . . . . . . .	L Near	 000003D6 _TEXT	
  clickcolorspace  . . . . . . .	L Near	 0000044D _TEXT	
  contclickColor2  . . . . . . .	L Near	 0000045F _TEXT	
  notnumber2 . . . . . . . . . .	L Near	 00000472 _TEXT	
  number2  . . . . . . . . . . .	L Near	 00000477 _TEXT	
writetitle . . . . . . . . . . .	P Near	 000001C7 _TEXT	Length= 000000F9 Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
you_lose . . . . . . . . . . . .	P Near	 00000B8D _TEXT	Length= 00000006 Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BLOCK_HEIGHT . . . . . . . . . .	Number	 0000000Ah   
BLOCK_WIDTH  . . . . . . . . . .	Number	 00000014h   
BL_MAX_X . . . . . . . . . . . .	Number	 00000069h   
BL_MAX_Y . . . . . . . . . . . .	Number	 00000028h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COLOR_BLACK  . . . . . . . . . .	Number	 00000000h   
COLOR_BLUE . . . . . . . . . . .	Number	 00000001h   
COLOR_DEFAULT  . . . . . . . . .	Number	 0000000Fh   
COLOR_FG_YELLOW  . . . . . . . .	Number	 0000000Eh   
COLOR_GREEN  . . . . . . . . . .	Number	 00000002h   
COLOR_RED  . . . . . . . . . . .	Number	 00000004h   
COLOR_WHITE  . . . . . . . . . .	Number	 0000000Fh   
COLOR_YELLOW . . . . . . . . . .	Number	 0000000Eh   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
ConsoleMode  . . . . . . . . . .	DWord	 00000ADB _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GAME_HEIGHT  . . . . . . . . . .	Number	 0000002Fh   
GAME_WIDTH . . . . . . . . . . .	Number	 0000007Dh   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
InputRecord  . . . . . . . . . .	_INPUT_RECORD  00000ABF	_DATA	
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_BAR_START_x  . . . . . . .	Number	 0000007Dh   
RIGHT_BAR  . . . . . . . . . . .	Number	 00000019h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCREEN_HEIGHT  . . . . . . . . .	Number	 00000032h   
SCREEN_WIDTH . . . . . . . . . .	Number	 00000096h   
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STAT_BAR_LINE_OFFSET_Y . . . . .	Number	 0000002Fh   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blcoktober22 . . . . . . . . . .	Byte	 000001E2 _DATA	
blockClicked . . . . . . . . . .	Byte	 00000578 _DATA	
blocktober33 . . . . . . . . . .	Byte	 00000252 _DATA	
blocktober44 . . . . . . . . . .	Byte	 000002C2 _DATA	
blocktober55 . . . . . . . . . .	Byte	 00000332 _DATA	
blocktober66 . . . . . . . . . .	Byte	 000003A1 _DATA	
blocktober77 . . . . . . . . . .	Byte	 00000411 _DATA	
bloctober11  . . . . . . . . . .	Byte	 00000172 _DATA	
bloctober1 . . . . . . . . . . .	Byte	 00000137 _DATA	
bloctober2 . . . . . . . . . . .	Byte	 000001A7 _DATA	
bloctober3 . . . . . . . . . . .	Byte	 00000217 _DATA	
bloctober4 . . . . . . . . . . .	Byte	 00000287 _DATA	
bloctober5 . . . . . . . . . . .	Byte	 000002F7 _DATA	
bloctober6 . . . . . . . . . . .	Byte	 00000366 _DATA	
bloctober7 . . . . . . . . . . .	Byte	 000003D6 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
bottomBlock  . . . . . . . . . .	Byte	 00000459 _DATA	
bottomClickBlock . . . . . . . .	Byte	 00000492 _DATA	
bottomLifeBlock  . . . . . . . .	Byte	 0000047E _DATA	
boxColor . . . . . . . . . . . .	Byte	 000004A0 _DATA	
boxHeight  . . . . . . . . . . .	Byte	 0000049E _DATA	
boxWidth . . . . . . . . . . . .	Byte	 0000049F _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
car0 . . . . . . . . . . . . . .	Byte	 00000ADF _DATA	
car1 . . . . . . . . . . . . . .	Byte	 00000B40 _DATA	
car2 . . . . . . . . . . . . . .	Byte	 00000BA1 _DATA	
car3 . . . . . . . . . . . . . .	Byte	 00000C02 _DATA	
car4 . . . . . . . . . . . . . .	Byte	 00000C63 _DATA	
carsize  . . . . . . . . . . . .	Number	 00000061h   
clickedLast  . . . . . . . . . .	Byte	 0000042C _DATA	
currTime . . . . . . . . . . . .	DWord	 0000058A _DATA	
currentBlocksClicked . . . . . .	Byte	 00000577 _DATA	
currentClicks  . . . . . . . . .	Byte	 00000576 _DATA	
currentCol . . . . . . . . . . .	Byte	 0000049D _DATA	
currentRow . . . . . . . . . . .	Byte	 0000049C _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enterName  . . . . . . . . . . .	Byte	 0000050B _DATA	
eventsRead . . . . . . . . . . .	DWord	 0000059E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
firstTime  . . . . . . . . . . .	Byte	 0000042D _DATA	
gameHeight . . . . . . . . . . .	Byte	 0000049B _DATA	
gameWidth  . . . . . . . . . . .	Byte	 0000049A _DATA	
gameover0  . . . . . . . . . . .	Byte	 000006FD _DATA	
gameover1  . . . . . . . . . . .	Byte	 00000767 _DATA	
gameover2  . . . . . . . . . . .	Byte	 000007D2 _DATA	
gameover3  . . . . . . . . . . .	Byte	 0000083D _DATA	
gameover4  . . . . . . . . . . .	Byte	 000008A8 _DATA	
gameover5  . . . . . . . . . . .	Byte	 00000913 _DATA	
gameover6  . . . . . . . . . . .	Byte	 0000097E _DATA	
gameover7  . . . . . . . . . . .	Byte	 000009E9 _DATA	
gameover8  . . . . . . . . . . .	Byte	 00000A54 _DATA	
gosize . . . . . . . . . . . . .	Number	 0000006Ah   
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hKey . . . . . . . . . . . . . .	Byte	 00000665 _DATA	
hStdIn . . . . . . . . . . . . .	DWord	 00000AD3 _DATA	
help1  . . . . . . . . . . . . .	Byte	 000005D4 _DATA	
helpTitle  . . . . . . . . . . .	Byte	 000005A5 _DATA	
hunt10 . . . . . . . . . . . . .	Byte	 00000102 _DATA	
hunt1  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
hunt2  . . . . . . . . . . . . .	Byte	 00000019 _DATA	
hunt3  . . . . . . . . . . . . .	Byte	 00000039 _DATA	
hunt4  . . . . . . . . . . . . .	Byte	 00000057 _DATA	
hunt5  . . . . . . . . . . . . .	Byte	 00000072 _DATA	
hunt6  . . . . . . . . . . . . .	Byte	 00000090 _DATA	
hunt7  . . . . . . . . . . . . .	Byte	 000000AB _DATA	
hunt8  . . . . . . . . . . . . .	Byte	 000000C9 _DATA	
hunt9  . . . . . . . . . . . . .	Byte	 000000E4 _DATA	
intitle  . . . . . . . . . . . .	Byte	 0000042E _DATA	
lastTime . . . . . . . . . . . .	DWord	 0000058E _DATA	
level  . . . . . . . . . . . . .	Byte	 00000589 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lives  . . . . . . . . . . . . .	Byte	 0000057C _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxx . . . . . . . . . . . . . .	Byte	 000005A2 _DATA	
maxy . . . . . . . . . . . . . .	Byte	 000005A3 _DATA	
middleBlock  . . . . . . . . . .	Byte	 00000444 _DATA	
middleClickBlock . . . . . . . .	Byte	 0000048C _DATA	
middleLifeBlock  . . . . . . . .	Byte	 00000476 _DATA	
mouseClickx  . . . . . . . . . .	Word	 0000059A _DATA	
mouseClicky  . . . . . . . . . .	Word	 0000059C _DATA	
mouse  . . . . . . . . . . . . .	COORD	 00000596 _DATA	
movementOn . . . . . . . . . . .	Byte	 00000579 _DATA	
movex  . . . . . . . . . . . . .	Byte	 0000057A _DATA	
movey  . . . . . . . . . . . . .	Byte	 0000057B _DATA	
nRead  . . . . . . . . . . . . .	DWord	 00000AD7 _DATA	
newLevel . . . . . . . . . . . .	Byte	 000005A4 _DATA	
output2  . . . . . . . . . . . .	Byte	 000004A8 _DATA	
output3  . . . . . . . . . . . .	Byte	 000004B3 _DATA	
output4  . . . . . . . . . . . .	Byte	 000004BA _DATA	
output5  . . . . . . . . . . . .	Byte	 000004C0 _DATA	
output6  . . . . . . . . . . . .	Byte	 000004CB _DATA	
output7  . . . . . . . . . . . .	Byte	 000004D5 _DATA	
output8  . . . . . . . . . . . .	Byte	 000004F9 _DATA	
output . . . . . . . . . . . . .	Byte	 000004A2 _DATA	
player . . . . . . . . . . . . .	Byte	 00000562 _DATA	
plsize . . . . . . . . . . . . .	DWord	 00000572 _DATA	
rail_line  . . . . . . . . . . .	Byte	 00000666 _DATA	
red1 . . . . . . . . . . . . . .	Byte	 0000011D _DATA	
red2 . . . . . . . . . . . . . .	Byte	 0000018D _DATA	
red3 . . . . . . . . . . . . . .	Byte	 000001FD _DATA	
red4 . . . . . . . . . . . . . .	Byte	 0000026D _DATA	
red5 . . . . . . . . . . . . . .	Byte	 000002DD _DATA	
red6 . . . . . . . . . . . . . .	Byte	 0000034C _DATA	
red7 . . . . . . . . . . . . . .	Byte	 000003BC _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score  . . . . . . . . . . . . .	DWord	 00000585 _DATA	
screenHeight . . . . . . . . . .	Byte	 00000499 _DATA	
screenWidth  . . . . . . . . . .	Byte	 00000498 _DATA	
seconds  . . . . . . . . . . . .	DWord	 00000581 _DATA	
tempScore  . . . . . . . . . . .	DWord	 00000592 _DATA	
thx  . . . . . . . . . . . . . .	Byte	 00000543 _DATA	
topBlock . . . . . . . . . . . .	Byte	 0000042F _DATA	
topClickBlock  . . . . . . . . .	Byte	 00000486 _DATA	
topLifeBlock . . . . . . . . . .	Byte	 0000046E _DATA	
whitecolor . . . . . . . . . . .	Byte	 000004A1 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
yourscore  . . . . . . . . . . .	DWord	 0000057D _DATA	

	   0 Warnings
	   0 Errors
